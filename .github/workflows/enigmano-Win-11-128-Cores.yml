name: "‚ö° EnigMano Win11 + CRD Deployment"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: self-hosted

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano-Win11-CRD.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "üî¢ Previous Instance     : $prevInstance"
          Write-Host "üì¶ GitHub Repository     : $env:REPO"
          Write-Host "üîÅ Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "üÜî Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="

      - name: üîê Configure PowerShell & Runner
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Setting execution policy..."
          try {
              Set-ExecutionPolicy RemoteSigned -Scope Process -Force
              Write-Host "[SUCCESS] Execution policy set."
          } catch { Write-Host "[FAILED] Failed to set execution policy: $_"; exit 1 }

      - name: üì• Download Chrome Remote Desktop
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Downloading CRD MSI..."
          try {
              Invoke-WebRequest -Uri "https://dl.google.com/chrome-remote-desktop/chrome-remote-desktop_current_amd64.msi" -OutFile "$env:TEMP\crd.msi"
              Write-Host "[SUCCESS] CRD downloaded."
          } catch { Write-Host "[FAILED] Failed to download CRD: $_"; exit 1 }

      - name: ‚öôÔ∏è Install Chrome Remote Desktop
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Installing CRD..."
          try {
              Start-Process msiexec.exe -ArgumentList '/i', "$env:TEMP\crd.msi", '/qn', '/norestart' -Wait
              Write-Host "[SUCCESS] CRD installed."
          } catch { Write-Host "[FAILED] CRD installation failed: $_"; exit 1 }

      - name: üîë Configure CRD Host
        shell: pwsh
        run: |
          $code = "4/0AVMBsJiIdkqeHq3dOOlekXZuom4C6FbDDzrvbE8qk--aUn3pnjmafaBwdk11M8XEWXUNlQ"
          $pin = "123456"
          Write-Host "[DEBUG] Configuring CRD host..."
          try {
              & "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe" `
                  --code=$code `
                  --redirect-url="https://remotedesktop.google.com/_/oauthredirect" `
                  --name=$Env:COMPUTERNAME `
                  --pin=$pin
              Write-Host "[SUCCESS] CRD host configured."
          } catch { Write-Host "[FAILED] CRD configuration failed: $_"; exit 1 }

      - name: ‚è± Countdown Timer 6h
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Starting 6-hour countdown..."
          $duration = New-TimeSpan -Hours 6
          $endTime = (Get-Date).Add($duration)
          try {
              while ((Get-Date) -lt $endTime) {
                  $remaining = $endTime - (Get-Date)
                  Write-Host "‚è≥ Time remaining: $($remaining.Hours)h $($remaining.Minutes)m $($remaining.Seconds)s"
                  Start-Sleep -Seconds 1
              }
              Write-Host "[SUCCESS] Countdown finished!"
          } catch { Write-Host "[FAILED] Countdown encountered an error: $_"; exit 1 }

      - name: üí† Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "‚úÖ EnigMano Instance $env:INSTANCE_ID completed execution."
          Write-Host "üîã Powered by: SHAHZAIB-YT"
          Write-Host "üèÅ Deployment executed with full debug logging."

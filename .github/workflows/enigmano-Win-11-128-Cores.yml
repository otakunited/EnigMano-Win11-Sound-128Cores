name: Jor3a-Ti9niya-RDP

on:
  workflow_dispatch:

jobs:
  setup-rdp-novnc:
    runs-on: windows-latest

    steps:
    - name: 📥 Check out the repository
      uses: actions/checkout@v2

    - name: 🖥️ Enable RDP & Firewall
      shell: pwsh
      run: |
        Write-Host "[DEBUG] Enabling RDP..."
        try {
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
          Write-Host "[SUCCESS] RDP enabled and firewall configured."
        } catch {
          Write-Host "[FAILED] RDP enable failed: $_"
          exit 1
        }

        Write-Host "[DEBUG] Creating local user 'runneradmin'..."
        try {
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "admin@123" -Force)
          Write-Host "[SUCCESS] Local user 'runneradmin' created/updated."
        } catch {
          Write-Host "[FAILED] Creating local user failed: $_"
          exit 1
        }

    - name: 🌐 Download Cloudflared
      shell: pwsh
      run: |
        Write-Host "[DEBUG] Downloading Cloudflared..."
        $cfExe = "$env:USERPROFILE\cloudflared.exe"
        try {
          Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile $cfExe
          Write-Host "[SUCCESS] Cloudflared downloaded to $cfExe"
        } catch {
          Write-Host "[FAILED] Cloudflared download failed: $_"
          exit 1
        }

    - name: 📦 Download noVNC
      shell: pwsh
      run: |
        Write-Host "[DEBUG] Downloading noVNC..."
        $novncDir = "$env:USERPROFILE\novnc"
        try {
          Invoke-WebRequest "https://github.com/novnc/noVNC/archive/refs/heads/master.zip" -OutFile "$env:USERPROFILE\novnc.zip"
          Expand-Archive "$env:USERPROFILE\novnc.zip" -DestinationPath $novncDir
          Write-Host "[SUCCESS] noVNC extracted to $novncDir"
        } catch {
          Write-Host "[FAILED] noVNC download/extract failed: $_"
          exit 1
        }

    - name: 🚀 Start Cloudflare Tunnel + noVNC
      shell: pwsh
      run: |
        $cfExe = "$env:USERPROFILE\cloudflared.exe"
        $logFile = "$env:TEMP\cloudflared.log"
        $websockify = "$env:USERPROFILE\novnc\noVNC-master\utils\websockify\run.cmd"

        Write-Host "[DEBUG] Killing existing cloudflared processes..."
        Get-Process cloudflared -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

        Write-Host "[DEBUG] Starting Cloudflare tunnel for noVNC on port 6080..."
        Start-Process -FilePath $cfExe -ArgumentList "tunnel --url http://localhost:6080 --no-autoupdate --loglevel info --logfile $logFile" -WindowStyle Hidden
        Write-Host "[DEBUG] Cloudflare tunnel process started."

        Write-Host "[DEBUG] Starting Websockify noVNC (6080 -> 3389)..."
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c $websockify 6080 localhost:3389" -WindowStyle Hidden
        Write-Host "[DEBUG] Websockify noVNC process started."

        Write-Host "[DEBUG] Waiting for public URL from Cloudflare..."
        $timeout = 60
        $elapsed = 0
        $publicUrl = $null
        while ($elapsed -lt $timeout -and -not $publicUrl) {
            Start-Sleep -Seconds 2
            $elapsed += 2
            if (Test-Path $logFile) {
                $match = Select-String -Path $logFile -Pattern "https://.*trycloudflare.com" | Select-Object -Last 1
                if ($match) {
                    $publicUrl = $match.Line
                    Write-Host "[SUCCESS] noVNC Cloudflare public URL: $publicUrl"
                } else {
                    Write-Host "[DEBUG] Waiting for public URL..."
                }
            }
        }
        if (-not $publicUrl) {
            Write-Host "[FAILED] Could not retrieve public URL. Check log at $logFile"
            exit 1
        }

    - name: 🕒 Keep GitHub Action Runner Alive
      shell: pwsh
      run: |
        Write-Host "[DEBUG] Keeping runner alive for 6 hours..."
        Start-Sleep -Seconds 21600
        Write-Host "[SUCCESS] Runner alive period completed."

name: Self-Hosted RDP Cloudflare TCP

on:
  workflow_dispatch:

jobs:
  rdp-cloudflare-tunnel:
    runs-on: [self-hosted, windows]

    steps:
      - name: üìå Checkout Repository
        uses: actions/checkout@v2

      - name: üì• Download Cloudflared
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Downloading Cloudflared..."
          $cfPath = "$env:USERPROFILE\cloudflared.exe"
          try {
              Invoke-WebRequest "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile $cfPath
              Write-Host "[SUCCESS] Cloudflared downloaded to $cfPath"
          } catch {
              Write-Host "[FAILED] Cloudflared download failed: $_"
              exit 1
          }

      - name: ‚öôÔ∏è Enable Remote Desktop
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Enabling RDP..."
          try {
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
              Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
              Write-Host "[SUCCESS] RDP enabled."
          } catch {
              Write-Host "[FAILED] Could not enable RDP: $_"
              exit 1
          }

      - name: üë§ Create RDP User
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Creating local user 'runneradmin'..."
          try {
              $pass = ConvertTo-SecureString "admin@123" -AsPlainText -Force
              if (-not (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue)) {
                  New-LocalUser -Name "runneradmin" -Password $pass -FullName "RDP Admin" -Description "RDP User"
                  Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
              }
              Write-Host "[SUCCESS] Local user 'runneradmin' ready."
          } catch {
              Write-Host "[FAILED] Could not create user: $_"
              exit 1
          }

      - name: üåê Start Cloudflare TCP Tunnel
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Starting Cloudflare Tunnel for RDP..."
          $cfExe = "$env:USERPROFILE\cloudflared.exe"
          $logFile = "$env:TEMP\cloudflared.log"

          # Kill existing cloudflared
          Get-Process cloudflared -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

          # Start tunnel in background
          Start-Process -FilePath $cfExe -ArgumentList "tunnel --url tcp://localhost:3389 --no-autoupdate --loglevel info --logfile $logFile" -WindowStyle Hidden

          # Wait for public TCP URL
          $timeout = 60
          $elapsed = 0
          $publicUrl = $null
          while ($elapsed -lt $timeout -and -not $publicUrl) {
              Start-Sleep -Seconds 2
              $elapsed += 2
              if (Test-Path $logFile) {
                  $publicUrl = Select-String -Path $logFile -Pattern "tcp://.*trycloudflare.com" | Select-Object -Last 1
                  if ($publicUrl) { Write-Host "[SUCCESS] Cloudflare Tunnel URL: $($publicUrl.Line)" }
                  else { Write-Host "[DEBUG] Waiting for public TCP URL..." }
              }
          }

          if (-not $publicUrl) {
              Write-Host "[FAILED] Could not retrieve public TCP endpoint. Check log at $logFile"
              exit 1
          }

      - name: ‚è± Keep Runner Alive with 6h Countdown
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Keeping runner active for 6 hours..."
          $endTime = (Get-Date).AddHours(6)
          try {
              while ((Get-Date) -lt $endTime) {
                  $remaining = $endTime - (Get-Date)
                  Write-Host "‚è≥ Time remaining: $($remaining.Hours)h $($remaining.Minutes)m $($remaining.Seconds)s"
                  Start-Sleep -Seconds 60
              }
              Write-Host "[SUCCESS] 6-hour keep-alive completed."
          } catch {
              Write-Host "[FAILED] Keep-alive failed: $_"
              exit 1
          }

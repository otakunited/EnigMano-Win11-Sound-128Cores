name: "‚ö° EnigMano Win11 + 128 Cores via Cloudflare"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-11-arm

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano-Win-11-128-Cores.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "üî¢ Previous Instance     : $prevInstance"
          Write-Host "üì¶ GitHub Repository     : $env:REPO"
          Write-Host "üîÅ Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "üÜî Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="

      - name: ‚öîÔ∏è Execute EnigMano Unified Script
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          function Timestamp { (Get-Date).ToString("yyyy-MM-dd HH:mm:ss") }
          function Log($msg) { Write-Host "[ENIGMANO $(Timestamp)] $msg" }
          function Fail($msg) { Write-Error "[ENIGMANO-ERROR $(Timestamp)] $msg"; Exit 1 }

          $now = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          Write-Host @"
          ----------------------------------------------------
                   ENIGMANO INSTANCE $env:INSTANCE_ID BOOTING
          ----------------------------------------------------
            STATUS    : Initializing deployment sequence
            TIME      : $now
            ARCHITECT : SHAHZAIB-YT
          ----------------------------------------------------
          "@

          # === ACTIVER RDP ===
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1
          $secPass = ConvertTo-SecureString "P@ssw0rd!" -AsPlainText -Force
          Set-LocalUser -Name "runneradmin" -Password $secPass
          Log "‚úÖ RDP activ√© avec user=runneradmin / pass=P@ssw0rd!"

          # === INSTALL CLOUDFLARED ===
          Invoke-WebRequest "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe"
          Log "‚úÖ Cloudflared t√©l√©charg√©"

          # === LANCER LE TUNNEL CLOUDFLARE ===
          Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389" -WindowStyle Hidden
          Start-Sleep -Seconds 10

          try {
            $resp = Invoke-WebRequest -Uri "http://127.0.0.1:5000" -UseBasicParsing
            Log "üåê Tunnel Cloudflare lanc√© (acc√®s via URL fournie dans logs runner)"
          } catch {
            Fail "Impossible de r√©cup√©rer l‚ÄôURL du tunnel Cloudflare"
          }

          # === INSTALL APPS SECONDAIRES ===
          try {
              Log "D√©ploiement Brave-Browser..."
              Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Brave-Browser.ps1" -OutFile Brave-Browser.ps1
              .\Brave-Browser.ps1
          } catch { Fail "Brave Browser installation failed: $_" }

          try {
              Log "D√©ploiement IDM..."
              Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Download_Manager.ps1" -OutFile Download_Manager.ps1
              .\Download_Manager.ps1
          } catch { Fail "Download Manager installation failed: $_" }

          # === TIMER INSTANCE (AUTO SHUTDOWN) ===
          $totalMinutes = 340
          $startTime = Get-Date
          $endTime = $startTime.AddMinutes($totalMinutes)

          while ((Get-Date) -lt $endTime) {
              $now = Get-Date
              $elapsed = [math]::Round(($now - $startTime).TotalMinutes, 1)
              $remaining = [math]::Round(($endTime - $now).TotalMinutes, 1)
              Log "‚è≥ Uptime: $elapsed min | Restant: $remaining min"
              Start-Sleep -Seconds 900
          }

          Log "üî¥ Arr√™t instance EnigMano $env:INSTANCE_ID"
          Exit

$ErrorActionPreference = "Stop"

function Timestamp { (Get-Date).ToString("yyyy-MM-dd HH:mm:ss") }
function Log($msg) { Write-Host "[ENIGMANO $(Timestamp)] $msg" }
function Fail($msg) { Write-Error "[ENIGMANO-ERROR $(Timestamp)] $msg"; Exit 1 }

# === ASCII BANNER ===
$now = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Write-Host @"
----------------------------------------------------
         ENIGMANO INSTANCE $env:INSTANCE_ID BOOTING
----------------------------------------------------
  STATUS    : Initializing deployment sequence
  TIME      : $now
  ARCHITECT : SHAHZAIB-YT
----------------------------------------------------
"@

# === ENVIRONMENT VARIABLES ===
$INSTANCE_ID     = [int]$env:INSTANCE_ID
$NEXT_INSTANCE_ID = $INSTANCE_ID + 1
$WORKFLOW_FILE   = "enigmano-Win-11.yml"
$BRANCH          = "main"
$RUNNER_ENV      = $env:RUNNER_ENV
$CRD_PIN         = "123456" # <-- PIN à utiliser pour Chrome Remote Desktop
$CRD_CODE        = "4/0AVMBsJhftMkCYAJL_JDRkyfO7RODCsAIoltywFOEqBJJB38or1kETQN3XBFsEvGTG4KhqA"

# === ACCESS ENABLEMENT ===
Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1
$secPass = ConvertTo-SecureString "P@ssw0rd!" -AsPlainText -Force
Set-LocalUser -Name "runneradmin" -Password $secPass
Log "Instance ingress protocols activated"

# === START CHROME REMOTE DESKTOP ===
$CRDExe = "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
if (!(Test-Path $CRDExe)) { Fail "❌ Chrome Remote Desktop not found at $CRDExe" }

Log "🚀 Starting Chrome Remote Desktop host with PIN..."
Start-Process -FilePath $CRDExe -ArgumentList "--code=$CRD_CODE --redirect-url=https://remotedesktop.google.com/_/oauthredirect --name=$Env:COMPUTERNAME --pin=$CRD_PIN" -NoNewWindow
Log "✅ CRD host started successfully. PIN: $CRD_PIN"

# === SOFTWARE INSTALLATION DEPLOYMENTS ===
try {
    Log "Deploying Env-Personalization..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Env-Personalization.ps1" -OutFile Env-Personalization.ps1
    .\Env-Personalization.ps1
} catch { Fail "Env-Personalization deployment failed: $_" }

try {
    Log "Deploying Brave-Browser..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Brave-Browser.ps1" -OutFile Brave-Browser.ps1
    .\Brave-Browser.ps1
} catch { Fail "Brave-Browser deployment failed: $_" }

try {
    Log "Deploying Browser-Extensions..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Browser-Extensions.ps1" -OutFile Browser-Extensions.ps1
    .\Browser-Extensions.ps1
} catch { Fail "Browser-Extensions deployment failed: $_" }

try {
    Log "Deploying Browser-Env-Setup..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Browser-Env-Setup.ps1" -OutFile Browser-Env-Setup.ps1
    .\Browser-Env-Setup.ps1
} catch { Fail "Browser-Env-Setup deployment failed: $_" }

# === DATA VAULT CREATION ===
try {
    $desktopPath = [Environment]::GetFolderPath("Desktop")
    $dataFolderPath = Join-Path $desktopPath "Data"
    if (-not (Test-Path $dataFolderPath)) { New-Item -Path $dataFolderPath -ItemType Directory | Out-Null }
    else { Log "Data vault already exists at $dataFolderPath" }
} catch { Fail "Failed to create data vault: $_" }

# === SECONDARY DEPLOYMENTS ===
try {
    Log "Downloading IDM..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Download_Manager.ps1" -OutFile Download_Manager.ps1
    .\Download_Manager.ps1
} catch { Fail "Download Manager deployment failed: $_" }

try {
    Log "Deploying Cloudflare-WARP..."
    Invoke-WebRequest "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/Cloudflare-WARP.ps1" -OutFile Cloudflare-WARP.ps1
    .\Cloudflare-WARP.ps1
} catch { Fail "Cloudflare-WARP deployment failed: $_" }

# === TIMERS & SHUTDOWN ===
$totalMinutes    = 340
$handoffMinutes  = 330
$shutdownMinutes = 335
$startTime       = Get-Date
$handoffTime     = $startTime.AddMinutes($handoffMinutes)
$shutdownTime    = $startTime.AddMinutes($shutdownMinutes)

while ((Get-Date) -lt $shutdownTime) {
    $now       = Get-Date
    $elapsed   = [math]::Round(($now - $startTime).TotalMinutes, 1)
    $remaining = [math]::Round(($shutdownTime - $now).TotalMinutes, 1)
    Log "Uptime: $elapsed min | Remaining: $remaining min"
    Start-Sleep -Seconds (Get-Random -Minimum 900 -Maximum 1800) # pause 15-30min
}

Log "Decommissioning EnigMano instance $INSTANCE_ID"
if ($RUNNER_ENV -eq "self-hosted") { Stop-Computer -Force }
else { Log "Termination skipped on hosted environment. Process exit."; Exit }
